generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  username      String?   @unique
  accounts      Account[]
  sessions      Session[]
  movieLists   MovieList[]

  @@map("user")
}

model MovieList {
  id          String   @id @default(cuid())
  name        String
  userId      String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieItems  MovieListItem[]   
  @@map("movie_list")
}

model Movie {
  id          String   @id @default(cuid())
  imdbId      String?  @unique  
  title       String
  year        String?
  genre       String?
  director    String?
  actors      String?
  plot        String?
  poster      String?
  imdbRating  String?
  runtime     String?
  released    String?
  type        String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  movieListItems MovieListItem[]
  
  @@map("movie")
}

model MovieListItem {
  id          String    @id @default(cuid())
  movieListId String
  movieId     String
  addedAt     DateTime  @default(now())
  notes       String?  
  movieList   MovieList @relation(fields: [movieListId], references: [id], onDelete: Cascade)
  movie       Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  
  @@unique([movieListId, movieId]) 
  @@map("movie_list_item")
}

